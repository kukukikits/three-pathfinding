{"version":3,"file":"three-pathfinding.module.js","sources":["../src/Pathfinding.js","../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/PathfindingHelper.js"],"sourcesContent":["import {\r\n\tVector3,\r\n\tPlane,\r\n\tTriangle,\r\n} from 'three';\r\n\r\nimport { Utils } from './Utils';\r\nimport { AStar } from './AStar';\r\nimport { Builder } from './Builder';\r\nimport { Channel } from './Channel';\r\n\r\n/**\r\n * Defines an instance of the pathfinding module, with one or more zones.\r\n */\r\nclass Pathfinding {\r\n\tconstructor () {\r\n\t\tthis.zones = {};\r\n\t}\r\n\r\n\t/**\r\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\r\n\t * @param  {BufferGeometry} geometry\r\n\t * @param  {number} tolerance Vertex welding tolerance.\r\n\t * @return {Zone}\r\n\t */\r\n\tstatic createZone (geometry, tolerance = 1e-4) {\r\n\t\treturn Builder.buildZone(geometry, tolerance);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets data for the given zone.\r\n\t * @param {string} zoneID\r\n\t * @param {Zone} zone\r\n\t */\r\n\tsetZoneData (zoneID, zone) {\r\n\t\tthis.zones[zoneID] = zone;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random node within a given range of a given position.\r\n\t * @param  {string} zoneID\r\n\t * @param  {number} groupID\r\n\t * @param  {Vector3} nearPosition\r\n\t * @param  {number} nearRange\r\n\t * @return {Node}\r\n\t */\r\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\r\n\r\n\t\tif (!this.zones[zoneID]) return new Vector3();\r\n\r\n\t\tnearPosition = nearPosition || null;\r\n\t\tnearRange = nearRange || 0;\r\n\r\n\t\tconst candidates = [];\r\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\r\n\r\n\t\tpolygons.forEach((p) => {\r\n\t\t\tif (nearPosition && nearRange) {\r\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\r\n\t\t\t\t\tcandidates.push(p.centroid);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcandidates.push(p.centroid);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn Utils.sample(candidates) || new Vector3();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the closest node to the target position.\r\n\t * @param  {Vector3} position\r\n\t * @param  {string}  zoneID\r\n\t * @param  {number}  groupID\r\n\t * @param  {boolean} checkPolygon\r\n\t * @return {Node}\r\n\t */\r\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\r\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\r\n\t\tconst vertices = this.zones[zoneID].vertices;\r\n\t\tlet closestNode = null;\r\n\t\tlet closestDistance = Infinity;\r\n\r\n\t\tnodes.forEach((node) => {\r\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\r\n\t\t\tif (distance < closestDistance\r\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\r\n\t\t\t\tclosestNode = node;\r\n\t\t\t\tclosestDistance = distance;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn closestNode;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a path between given start and end points. If a complete path\r\n\t * cannot be found, will return the nearest endpoint available.\r\n\t *\r\n\t * @param  {Vector3} startPosition Start position.\r\n\t * @param  {Vector3} targetPosition Destination.\r\n\t * @param  {string} zoneID ID of current zone.\r\n\t * @param  {number} groupID Current group ID.\r\n\t * @return {Array<Vector3>} Array of points defining the path.\r\n\t */\r\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\r\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\r\n\t\tconst vertices = this.zones[zoneID].vertices;\r\n\r\n\t\t// const closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\r\n        // breaking fix of bug this issues: https://github.com/donmccurdy/three-pathfinding/issues/79\r\n        const closestNode = this.getClosestNode(startPosition, zoneID, groupID, false);\r\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\r\n\r\n\t\t// If we can't find any node, just go straight to the target\r\n\t\tif (!closestNode || !farthestNode) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\r\n\r\n\t\tconst getPortalFromTo = function (a, b) {\r\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\r\n\t\t\t\tif (a.neighbours[i] === b.id) {\r\n\t\t\t\t\treturn a.portals[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// We have the corridor, now pull the rope.\r\n\t\tconst channel = new Channel();\r\n\t\tchannel.push(startPosition);\r\n\t\tfor (let i = 0; i < paths.length; i++) {\r\n\t\t\tconst polygon = paths[i];\r\n\t\t\tconst nextPolygon = paths[i + 1];\r\n\r\n\t\t\tif (nextPolygon) {\r\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\r\n\t\t\t\tchannel.push(\r\n\t\t\t\t\tvertices[portals[0]],\r\n\t\t\t\t\tvertices[portals[1]]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tchannel.push(targetPosition);\r\n\t\tchannel.stringPull();\r\n\r\n\t\t// Return the path, omitting first position (which is already known).\r\n\t\tconst path = channel.path.map((c) => new Vector3(c.x, c.y, c.z));\r\n\t\tpath.shift();\r\n\t\treturn path;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns closest node group ID for given position.\r\n * @param  {string} zoneID\r\n * @param  {Vector3} position\r\n * @return {number}\r\n */\r\nPathfinding.prototype.getGroup = (function() {\r\n\tconst plane = new Plane();\r\n\treturn function (zoneID, position, checkPolygon = false) {\r\n\t\tif (!this.zones[zoneID]) return null;\r\n\r\n\t\tlet closestNodeGroup = null;\r\n\t\tlet distance = Math.pow(50, 2);\r\n\t\tconst zone = this.zones[zoneID];\r\n\r\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\r\n\t\t\tconst group = zone.groups[i];\r\n\t\t\tfor (const node of group) {\r\n\t\t\t\tif (checkPolygon) {\r\n\t\t\t\t\tplane.setFromCoplanarPoints(\r\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\r\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\r\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\r\n\t\t\t\t\t\tconst poly = [\r\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\r\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\r\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\r\n\t\t\t\t\t\t\treturn i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\r\n\t\t\t\tif (measuredDistance < distance) {\r\n\t\t\t\t\tclosestNodeGroup = i;\r\n\t\t\t\t\tdistance = measuredDistance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestNodeGroup;\r\n\t};\r\n}());\r\n\r\n/**\r\n * Clamps a step along the navmesh, given start and desired endpoint. May be\r\n * used to constrain first-person / WASD controls.\r\n *\r\n * @param  {Vector3} start\r\n * @param  {Vector3} end Desired endpoint.\r\n * @param  {Node} node\r\n * @param  {string} zoneID\r\n * @param  {number} groupID\r\n * @param  {Vector3} endTarget Updated endpoint.\r\n * @return {Node} Updated node.\r\n */\r\nPathfinding.prototype.clampStep = (function () {\r\n\tconst point = new Vector3();\r\n\tconst plane = new Plane();\r\n\tconst triangle = new Triangle();\r\n\r\n\tconst endPoint = new Vector3();\r\n\r\n\tlet closestNode;\r\n\tlet closestPoint = new Vector3();\r\n\tlet closestDistance;\r\n\r\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\r\n\t\tconst vertices = this.zones[zoneID].vertices;\r\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\r\n\r\n\t\tconst nodeQueue = [node];\r\n\t\tconst nodeDepth = {};\r\n\t\tnodeDepth[node.id] = 0;\r\n\r\n\t\tclosestNode = undefined;\r\n\t\tclosestPoint.set(0, 0, 0);\r\n\t\tclosestDistance = Infinity;\r\n\r\n\t\t// Project the step along the current node.\r\n\t\tplane.setFromCoplanarPoints(\r\n\t\t\tvertices[node.vertexIds[0]],\r\n\t\t\tvertices[node.vertexIds[1]],\r\n\t\t\tvertices[node.vertexIds[2]]\r\n\t\t);\r\n\t\tplane.projectPoint(endRef, point);\r\n\t\tendPoint.copy(point);\r\n\r\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\r\n\r\n\t\t\ttriangle.set(\r\n\t\t\t\tvertices[currentNode.vertexIds[0]],\r\n\t\t\t\tvertices[currentNode.vertexIds[1]],\r\n\t\t\t\tvertices[currentNode.vertexIds[2]]\r\n\t\t\t);\r\n\r\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\r\n\r\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\r\n\t\t\t\tclosestNode = currentNode;\r\n\t\t\t\tclosestPoint.copy(point);\r\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\r\n\t\t\t}\r\n\r\n\t\t\tconst depth = nodeDepth[currentNode.id];\r\n\t\t\tif (depth > 2) continue;\r\n\r\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\r\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\r\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\r\n\r\n\t\t\t\tnodeQueue.push(neighbour);\r\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tendTarget.copy(closestPoint);\r\n\t\treturn closestNode;\r\n\t};\r\n}());\r\n\r\n/**\r\n * Defines a zone of interconnected groups on a navigation mesh.\r\n *\r\n * @type {Object}\r\n * @property {Array<Group>} groups\r\n * @property {Array<Vector3>} vertices\r\n */\r\nconst Zone = {}; // jshint ignore:line\r\n\r\n/**\r\n * Defines a group within a navigation mesh.\r\n *\r\n * @type {Object}\r\n */\r\nconst Group = {}; // jshint ignore:line\r\n\r\n/**\r\n * Defines a node (or polygon) within a group.\r\n *\r\n * @type {Object}\r\n * @property {number} id\r\n * @property {Array<number>} neighbours IDs of neighboring nodes.\r\n * @property {Array<number>} vertexIds\r\n * @property {Vector3} centroid\r\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\r\n * @property {boolean} closed\r\n * @property {number} cost\r\n */\r\nconst Node = {}; // jshint ignore:line\r\n\r\nexport { Pathfinding };\r\n","import { BufferAttribute, BufferGeometry } from 'three';\r\n\r\nclass Utils {\r\n\r\n  static roundNumber (value, decimals) {\r\n    const factor = Math.pow(10, decimals);\r\n    return Math.round(value * factor) / factor;\r\n  }\r\n\r\n  static sample (list) {\r\n    return list[Math.floor(Math.random() * list.length)];\r\n  }\r\n\r\n  static distanceToSquared (a, b) {\r\n\r\n    var dx = a.x - b.x;\r\n    var dy = a.y - b.y;\r\n    var dz = a.z - b.z;\r\n\r\n    return dx * dx + dy * dy + dz * dz;\r\n\r\n  }\r\n\r\n  //+ Jonas Raoni Soares Silva\r\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\r\n  static isPointInPoly (poly, pt) {\r\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\r\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\r\n    return c;\r\n  }\r\n\r\n  static isVectorInPolygon (vector, polygon, vertices) {\r\n\r\n    // reference point will be the centroid of the polygon\r\n    // We need to rotate the vector as well as all the points which the polygon uses\r\n\r\n    var lowestPoint = 100000;\r\n    var highestPoint = -100000;\r\n\r\n    var polygonVertices = [];\r\n\r\n    polygon.vertexIds.forEach((vId) => {\r\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\r\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\r\n      polygonVertices.push(vertices[vId]);\r\n    });\r\n\r\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\r\n      this.isPointInPoly(polygonVertices, vector)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static triarea2 (a, b, c) {\r\n    var ax = b.x - a.x;\r\n    var az = b.z - a.z;\r\n    var bx = c.x - a.x;\r\n    var bz = c.z - a.z;\r\n    return bx * az - ax * bz;\r\n  }\r\n\r\n  static vequal (a, b) {\r\n    return this.distanceToSquared(a, b) < 0.00001;\r\n  }\r\n\r\n  /**\r\n   * Modified version of BufferGeometryUtils.mergeVertices, ignoring vertex\r\n   * attributes other than position.\r\n   *\r\n   * @param {THREE.BufferGeometry} geometry\r\n   * @param {number} tolerance\r\n   * @return {THREE.BufferGeometry>}\r\n   */\r\n  static mergeVertices (geometry, tolerance = 1e-4) {\r\n\r\n    tolerance = Math.max( tolerance, Number.EPSILON );\r\n\r\n    // Generate an index buffer if the geometry doesn't have one, or optimize it\r\n    // if it's already available.\r\n    var hashToIndex = {};\r\n    var indices = geometry.getIndex();\r\n    var positions = geometry.getAttribute( 'position' );\r\n    var vertexCount = indices ? indices.count : positions.count;\r\n\r\n    // Next value for triangle indices.\r\n    var nextIndex = 0;\r\n\r\n    var newIndices = [];\r\n    var newPositions = [];\r\n\r\n    // Convert the error tolerance to an amount of decimal places to truncate to.\r\n    var decimalShift = Math.log10( 1 / tolerance );\r\n    var shiftMultiplier = Math.pow( 10, decimalShift );\r\n\r\n    for ( var i = 0; i < vertexCount; i ++ ) {\r\n\r\n      var index = indices ? indices.getX( i ) : i;\r\n\r\n      // Generate a hash for the vertex attributes at the current index 'i'.\r\n      var hash = '';\r\n\r\n      // Double tilde truncates the decimal value.\r\n      hash += `${ ~ ~ ( positions.getX( index ) * shiftMultiplier ) },`;\r\n      hash += `${ ~ ~ ( positions.getY( index ) * shiftMultiplier ) },`;\r\n      hash += `${ ~ ~ ( positions.getZ( index ) * shiftMultiplier ) },`;\r\n\r\n      // Add another reference to the vertex if it's already\r\n      // used by another index.\r\n      if ( hash in hashToIndex ) {\r\n\r\n        newIndices.push( hashToIndex[ hash ] );\r\n\r\n      } else {\r\n\r\n        newPositions.push( positions.getX( index ) );\r\n        newPositions.push( positions.getY( index ) );\r\n        newPositions.push( positions.getZ( index ) );\r\n\r\n        hashToIndex[ hash ] = nextIndex;\r\n        newIndices.push( nextIndex );\r\n        nextIndex ++;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // Construct merged BufferGeometry.\r\n\r\n    const positionAttribute = new BufferAttribute(\r\n      new Float32Array( newPositions ),\r\n      positions.itemSize,\r\n      positions.normalized\r\n    );\r\n\r\n    const result = new BufferGeometry();\r\n    result.setAttribute( 'position', positionAttribute );\r\n    result.setIndex( newIndices );\r\n\r\n    return result;\r\n\r\n  }\r\n}\r\n\r\nexport { Utils };\r\n","// javascript-astar\r\n// http://github.com/bgrins/javascript-astar\r\n// Freely distributable under the MIT License.\r\n// Implements the astar search algorithm in javascript using a binary heap.\r\n\r\nclass BinaryHeap {\r\n  constructor (scoreFunction) {\r\n    this.content = [];\r\n    this.scoreFunction = scoreFunction;\r\n  }\r\n\r\n  push (element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n\r\n    // Allow it to sink down.\r\n    this.sinkDown(this.content.length - 1);\r\n  }\r\n\r\n  pop () {\r\n    // Store the first element so we can return it later.\r\n    const result = this.content[0];\r\n    // Get the element at the end of the array.\r\n    const end = this.content.pop();\r\n    // If there are any elements left, put the end element at the\r\n    // start, and let it bubble up.\r\n    if (this.content.length > 0) {\r\n      this.content[0] = end;\r\n      this.bubbleUp(0);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  remove (node) {\r\n    const i = this.content.indexOf(node);\r\n\r\n    // When it is found, the process seen in 'pop' is repeated\r\n    // to fill up the hole.\r\n    const end = this.content.pop();\r\n\r\n    if (i !== this.content.length - 1) {\r\n      this.content[i] = end;\r\n\r\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\r\n        this.sinkDown(i);\r\n      } else {\r\n        this.bubbleUp(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  size () {\r\n    return this.content.length;\r\n  }\r\n\r\n  rescoreElement (node) {\r\n    this.sinkDown(this.content.indexOf(node));\r\n  }\r\n\r\n  sinkDown (n) {\r\n    // Fetch the element that has to be sunk.\r\n    const element = this.content[n];\r\n\r\n    // When at 0, an element can not sink any further.\r\n    while (n > 0) {\r\n      // Compute the parent element's index, and fetch it.\r\n      const parentN = ((n + 1) >> 1) - 1;\r\n      const parent = this.content[parentN];\r\n\r\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n        // Swap the elements if the parent is greater.\r\n        this.content[parentN] = element;\r\n        this.content[n] = parent;\r\n        // Update 'n' to continue at the new position.\r\n        n = parentN;\r\n      } else {\r\n        // Found a parent that is less, no need to sink any further.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleUp (n) {\r\n    // Look up the target element and its score.\r\n    const length = this.content.length,\r\n      element = this.content[n],\r\n      elemScore = this.scoreFunction(element);\r\n\r\n    while (true) {\r\n      // Compute the indices of the child elements.\r\n      const child2N = (n + 1) << 1,\r\n        child1N = child2N - 1;\r\n      // This is used to store the new position of the element,\r\n      // if any.\r\n      let swap = null;\r\n      let child1Score;\r\n      // If the first child exists (is inside the array)...\r\n      if (child1N < length) {\r\n        // Look it up and compute its score.\r\n        const child1 = this.content[child1N];\r\n        child1Score = this.scoreFunction(child1);\r\n\r\n        // If the score is less than our element's, we need to swap.\r\n        if (child1Score < elemScore) {\r\n          swap = child1N;\r\n        }\r\n      }\r\n\r\n      // Do the same checks for the other child.\r\n      if (child2N < length) {\r\n        const child2 = this.content[child2N],\r\n          child2Score = this.scoreFunction(child2);\r\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\r\n          swap = child2N;\r\n        }\r\n      }\r\n\r\n      // If the element needs to be moved, swap it, and continue.\r\n      if (swap !== null) {\r\n        this.content[n] = this.content[swap];\r\n        this.content[swap] = element;\r\n        n = swap;\r\n      }\r\n\r\n      // Otherwise, we are done.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { BinaryHeap };\r\n","import { BinaryHeap } from './BinaryHeap';\r\nimport { Utils } from './Utils.js';\r\n\r\nclass AStar {\r\n  static init (graph) {\r\n    for (let x = 0; x < graph.length; x++) {\r\n      //for(var x in graph) {\r\n      const node = graph[x];\r\n      node.f = 0;\r\n      node.g = 0;\r\n      node.h = 0;\r\n      node.cost = 1.0;\r\n      node.visited = false;\r\n      node.closed = false;\r\n      node.parent = null;\r\n    }\r\n  }\r\n\r\n  static cleanUp (graph) {\r\n    for (let x = 0; x < graph.length; x++) {\r\n      const node = graph[x];\r\n      delete node.f;\r\n      delete node.g;\r\n      delete node.h;\r\n      delete node.cost;\r\n      delete node.visited;\r\n      delete node.closed;\r\n      delete node.parent;\r\n    }\r\n  }\r\n\r\n  static heap () {\r\n    return new BinaryHeap(function (node) {\r\n      return node.f;\r\n    });\r\n  }\r\n\r\n  static search (graph, start, end) {\r\n    this.init(graph);\r\n    //heuristic = heuristic || astar.manhattan;\r\n\r\n\r\n    const openHeap = this.heap();\r\n\r\n    openHeap.push(start);\r\n\r\n    while (openHeap.size() > 0) {\r\n\r\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\r\n      const currentNode = openHeap.pop();\r\n\r\n      // End case -- result has been found, return the traced path.\r\n      if (currentNode === end) {\r\n        let curr = currentNode;\r\n        const ret = [];\r\n        while (curr.parent) {\r\n          ret.push(curr);\r\n          curr = curr.parent;\r\n        }\r\n        this.cleanUp(ret);\r\n        return ret.reverse();\r\n      }\r\n\r\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\r\n      currentNode.closed = true;\r\n\r\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\r\n      const neighbours = this.neighbours(graph, currentNode);\r\n\r\n      for (let i = 0, il = neighbours.length; i < il; i++) {\r\n        const neighbour = neighbours[i];\r\n\r\n        if (neighbour.closed) {\r\n          // Not a valid node to process, skip to next neighbour.\r\n          continue;\r\n        }\r\n\r\n        // The g score is the shortest distance from start to current node.\r\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\r\n        const gScore = currentNode.g + neighbour.cost;\r\n        const beenVisited = neighbour.visited;\r\n\r\n        if (!beenVisited || gScore < neighbour.g) {\r\n\r\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\r\n          neighbour.visited = true;\r\n          neighbour.parent = currentNode;\r\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\r\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\r\n          neighbour.g = gScore;\r\n          neighbour.f = neighbour.g + neighbour.h;\r\n\r\n          if (!beenVisited) {\r\n            // Pushing to heap will put it in proper place based on the 'f' value.\r\n            openHeap.push(neighbour);\r\n          } else {\r\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\r\n            openHeap.rescoreElement(neighbour);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // No result was found - empty array signifies failure to find path.\r\n    return [];\r\n  }\r\n\r\n  static heuristic (pos1, pos2) {\r\n    return Utils.distanceToSquared(pos1, pos2);\r\n  }\r\n\r\n  static neighbours (graph, node) {\r\n    const ret = [];\r\n\r\n    for (let e = 0; e < node.neighbours.length; e++) {\r\n      ret.push(graph[node.neighbours[e]]);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n}\r\n\r\nexport { AStar };\r\n","import { Vector3 } from 'three';\r\n\r\nimport { Utils } from './Utils';\r\n\r\nclass Builder {\r\n  /**\r\n   * Constructs groups from the given navigation mesh.\r\n   * @param  {BufferGeometry} geometry\r\n   * @param  {number} tolerance\r\n   * @return {Zone}\r\n   */\r\n  static buildZone (geometry, tolerance) {\r\n\r\n    const navMesh = this._buildNavigationMesh(geometry, tolerance);\r\n\r\n    const zone = {};\r\n\r\n    navMesh.vertices.forEach((v) => {\r\n      v.x = Utils.roundNumber(v.x, 2);\r\n      v.y = Utils.roundNumber(v.y, 2);\r\n      v.z = Utils.roundNumber(v.z, 2);\r\n    });\r\n\r\n    zone.vertices = navMesh.vertices;\r\n\r\n    const groups = this._buildPolygonGroups(navMesh);\r\n\r\n    // TODO: This block represents a large portion of navigation mesh construction time\r\n    // and could probably be optimized. For example, construct portals while\r\n    // determining the neighbor graph.\r\n    zone.groups = new Array(groups.length);\r\n    groups.forEach((group, groupIndex) => {\r\n\r\n      const indexByPolygon = new Map(); // { polygon: index in group }\r\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\r\n\r\n      const newGroup = new Array(group.length);\r\n      group.forEach((poly, polyIndex) => {\r\n\r\n        const neighbourIndices = [];\r\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\r\n\r\n        // Build a portal list to each neighbour\r\n        const portals = [];\r\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\r\n\r\n        const centroid = new Vector3( 0, 0, 0 );\r\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\r\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\r\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\r\n        centroid.divideScalar( 3 );\r\n        centroid.x = Utils.roundNumber(centroid.x, 2);\r\n        centroid.y = Utils.roundNumber(centroid.y, 2);\r\n        centroid.z = Utils.roundNumber(centroid.z, 2);\r\n\r\n        newGroup[polyIndex] = {\r\n          id: polyIndex,\r\n          neighbours: neighbourIndices,\r\n          vertexIds: poly.vertexIds,\r\n          centroid: centroid,\r\n          portals: portals\r\n        };\r\n      });\r\n\r\n      zone.groups[groupIndex] = newGroup;\r\n    });\r\n\r\n    return zone;\r\n  }\r\n\r\n  /**\r\n   * Constructs a navigation mesh from the given geometry.\r\n   * @param {BufferGeometry} geometry\r\n   * @return {Object}\r\n   */\r\n  static _buildNavigationMesh (geometry, tolerance) {\r\n    geometry = Utils.mergeVertices(geometry, tolerance);\r\n    return this._buildPolygonsFromGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Spreads the group ID of the given polygon to all connected polygons\r\n   * @param {Object} seed\r\n   */\r\n  static _spreadGroupId (seed) {\r\n    let nextBatch = new Set([seed]);\r\n\r\n    while(nextBatch.size > 0) {\r\n      const batch = nextBatch;\r\n      nextBatch = new Set();\r\n\r\n      batch.forEach((polygon) => {\r\n        polygon.group = seed.group;\r\n        polygon.neighbours.forEach((neighbour) => {\r\n          if(neighbour.group === undefined) {\r\n            nextBatch.add(neighbour);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  static _buildPolygonGroups (navigationMesh) {\r\n\r\n    const polygons = navigationMesh.polygons;\r\n\r\n    const polygonGroups = [];\r\n\r\n    polygons.forEach((polygon) => {\r\n      if (polygon.group !== undefined) {\r\n        // this polygon is already part of a group\r\n        polygonGroups[polygon.group].push(polygon);\r\n      } else {\r\n        // we need to make a new group and spread its ID to neighbors\r\n        polygon.group = polygonGroups.length;\r\n        this._spreadGroupId(polygon);\r\n        polygonGroups.push([polygon]);\r\n      }\r\n    });\r\n\r\n    return polygonGroups;\r\n  }\r\n\r\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\r\n    const neighbours = new Set();\r\n\r\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\r\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\r\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\r\n\r\n    // It's only necessary to iterate groups A and B. Polygons contained only\r\n    // in group C cannot share a >1 vertex with this polygon.\r\n    // IMPORTANT: Bublé cannot compile for-of loops.\r\n    groupA.forEach((candidate) => {\r\n      if (candidate === polygon) return;\r\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\r\n        neighbours.add(candidate);\r\n      }\r\n    });\r\n    groupB.forEach((candidate) => {\r\n      if (candidate === polygon) return;\r\n      if (groupC.includes(candidate)) {\r\n        neighbours.add(candidate);\r\n      }\r\n    });\r\n\r\n    return neighbours;\r\n  }\r\n\r\n  static _buildPolygonsFromGeometry (geometry) {\r\n\r\n    const polygons = [];\r\n    const vertices = [];\r\n\r\n    const position = geometry.attributes.position;\r\n    const index = geometry.index;\r\n\r\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\r\n    // create a map from vertices to the polygons that contain them, and use it\r\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\r\n    // is related to connectivity of the mesh.\r\n\r\n    /** Array of polygon objects by vertex index. */\r\n    const vertexPolygonMap = [];\r\n\r\n    for (let i = 0; i < position.count; i++) {\r\n      vertices.push(new Vector3().fromBufferAttribute(position, i));\r\n      vertexPolygonMap[i] = [];\r\n    }\r\n\r\n    // Convert the faces into a custom format that supports more than 3 vertices\r\n    for (let i = 0; i < geometry.index.count; i += 3) {\r\n      const a = index.getX(i);\r\n      const b = index.getX(i + 1);\r\n      const c = index.getX(i + 2);\r\n      const poly = {vertexIds: [a, b, c], neighbours: null};\r\n      polygons.push(poly);\r\n      vertexPolygonMap[a].push(poly);\r\n      vertexPolygonMap[b].push(poly);\r\n      vertexPolygonMap[c].push(poly);\r\n    }\r\n\r\n    // Build a list of adjacent polygons\r\n    polygons.forEach((polygon) => {\r\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\r\n    });\r\n\r\n    return {\r\n      polygons: polygons,\r\n      vertices: vertices\r\n    };\r\n  }\r\n\r\n  static _getSharedVerticesInOrder (a, b) {\r\n\r\n    const aList = a.vertexIds;\r\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\r\n\r\n    const bList = b.vertexIds;\r\n    const shared0 = bList.includes(a0);\r\n    const shared1 = bList.includes(a1);\r\n    const shared2 = bList.includes(a2);\r\n\r\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\r\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\r\n    // is a kind of embarrassing but possible geometry we should handle\r\n    if (shared0 && shared1 && shared2) {\r\n      return Array.from(aList);\r\n    } else if (shared0 && shared1) {\r\n      return [a0, a1];\r\n    } else if (shared1 && shared2) {\r\n      return [a1, a2];\r\n    } else if (shared0 && shared2) {\r\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\r\n    } else {\r\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport { Builder };\r\n","import { Utils } from './Utils';\r\n\r\nclass Channel {\r\n  constructor () {\r\n    this.portals = [];\r\n  }\r\n\r\n  push (p1, p2) {\r\n    if (p2 === undefined) p2 = p1;\r\n    this.portals.push({\r\n      left: p1,\r\n      right: p2\r\n    });\r\n  }\r\n\r\n  stringPull () {\r\n    const portals = this.portals;\r\n    const pts = [];\r\n    // Init scan state\r\n    let portalApex, portalLeft, portalRight;\r\n    let apexIndex = 0,\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    portalApex = portals[0].left;\r\n    portalLeft = portals[0].left;\r\n    portalRight = portals[0].right;\r\n\r\n    // Add start point.\r\n    pts.push(portalApex);\r\n\r\n    for (let i = 1; i < portals.length; i++) {\r\n      const left = portals[i].left;\r\n      const right = portals[i].right;\r\n\r\n      // Update right vertex.\r\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\r\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\r\n          // Tighten the funnel.\r\n          portalRight = right;\r\n          rightIndex = i;\r\n        } else {\r\n          // Right over left, insert left to path and restart scan from portal left point.\r\n          pts.push(portalLeft);\r\n          // Make current left the new apex.\r\n          portalApex = portalLeft;\r\n          apexIndex = leftIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Update left vertex.\r\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\r\n          // Tighten the funnel.\r\n          portalLeft = left;\r\n          leftIndex = i;\r\n        } else {\r\n          // Left over right, insert right to path and restart scan from portal right point.\r\n          pts.push(portalRight);\r\n          // Make current right the new apex.\r\n          portalApex = portalRight;\r\n          apexIndex = rightIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\r\n      // Append last point to path.\r\n      pts.push(portals[portals.length - 1].left);\r\n    }\r\n\r\n    this.path = pts;\r\n    return pts;\r\n  }\r\n}\r\n\r\nexport { Channel };\r\n","import {\r\n  BoxBufferGeometry,\r\n  BufferAttribute,\r\n  BufferGeometry,\r\n  Color,\r\n  Line,\r\n  LineBasicMaterial,\r\n  Mesh,\r\n  MeshBasicMaterial,\r\n  Object3D,\r\n  SphereBufferGeometry,\r\n  Vector3,\r\n} from 'three';\r\n\r\nconst colors = {\r\n  PLAYER: new Color( 0xee836f ).convertGammaToLinear( 2.2 ).getHex(),\r\n  TARGET: new Color( 0xdccb18 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  PATH: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  WAYPOINT: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLAMPED_STEP: new Color( 0xdcd3b2 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLOSEST_NODE: new Color( 0x43676b ).convertGammaToLinear( 2.2 ).getHex(),\r\n};\r\n\r\nconst OFFSET = 0.2;\r\n\r\n/**\r\n * Helper for debugging pathfinding behavior.\r\n */\r\nclass PathfindingHelper extends Object3D {\r\n  constructor () {\r\n    super();\r\n\r\n    this._playerMarker = new Mesh(\r\n      new SphereBufferGeometry( 0.25, 32, 32 ),\r\n      new MeshBasicMaterial( { color: colors.PLAYER } )\r\n    );\r\n\r\n    this._targetMarker = new Mesh(\r\n      new BoxBufferGeometry( 0.3, 0.3, 0.3 ),\r\n      new MeshBasicMaterial( { color: colors.TARGET } )\r\n    );\r\n\r\n\r\n    this._nodeMarker = new Mesh(\r\n      new BoxBufferGeometry( 0.1, 0.8, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLOSEST_NODE } )\r\n    );\r\n\r\n\r\n    this._stepMarker = new Mesh(\r\n      new BoxBufferGeometry( 0.1, 1, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLAMPED_STEP } )\r\n    );\r\n\r\n    this._pathMarker = new Object3D();\r\n\r\n    this._pathLineMaterial = new LineBasicMaterial( { color: colors.PATH, linewidth: 2 } ) ;\r\n    this._pathPointMaterial = new MeshBasicMaterial( { color: colors.WAYPOINT } );\r\n    this._pathPointGeometry = new SphereBufferGeometry( 0.08 );\r\n\r\n    this._markers = [\r\n      this._playerMarker,\r\n      this._targetMarker,\r\n      this._nodeMarker,\r\n      this._stepMarker,\r\n      this._pathMarker,\r\n    ];\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n      this.add( marker );\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Vector3>} path\r\n   * @return {this}\r\n   */\r\n  setPath ( path ) {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    path = [ this._playerMarker.position ].concat( path );\r\n\r\n    // Draw debug lines\r\n    const geometry = new BufferGeometry();\r\n    geometry.setAttribute('position', new BufferAttribute(new Float32Array(path.length * 3), 3));\r\n    for (let i = 0; i < path.length; i++) {\r\n      geometry.attributes.position.setXYZ(i, path[ i ].x, path[ i ].y + OFFSET, path[ i ].z);\r\n    }\r\n    this._pathMarker.add( new Line( geometry, this._pathLineMaterial ) );\r\n\r\n    for ( let i = 0; i < path.length - 1; i++ ) {\r\n\r\n      const node = new Mesh( this._pathPointGeometry, this._pathPointMaterial );\r\n      node.position.copy( path[ i ] );\r\n      node.position.y += OFFSET;\r\n      this._pathMarker.add( node );\r\n\r\n    }\r\n\r\n    this._pathMarker.visible = true;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setPlayerPosition( position ) {\r\n\r\n    this._playerMarker.position.copy( position );\r\n    this._playerMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setTargetPosition( position ) {\r\n\r\n    this._targetMarker.position.copy( position );\r\n    this._targetMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setNodePosition( position ) {\r\n\r\n    this._nodeMarker.position.copy( position );\r\n    this._nodeMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setStepPosition( position ) {\r\n\r\n    this._stepMarker.position.copy( position );\r\n    this._stepMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * Hides all markers.\r\n   * @return {this}\r\n   */\r\n  reset () {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n    } );\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport { PathfindingHelper };\r\n"],"names":["plane","Utils","roundNumber","value","decimals","factor","Math","pow","round","sample","list","floor","random","length","distanceToSquared","a","b","dx","x","dy","y","dz","z","isPointInPoly","poly","pt","c","i","l","j","isVectorInPolygon","vector","polygon","vertices","lowestPoint","highestPoint","polygonVertices","vertexIds","forEach","vId","min","max","push","this","triarea2","vequal","mergeVertices","geometry","tolerance","Number","EPSILON","hashToIndex","indices","getIndex","positions","getAttribute","vertexCount","count","nextIndex","newIndices","newPositions","decimalShift","log10","shiftMultiplier","index","getX","hash","getY","getZ","positionAttribute","BufferAttribute","Float32Array","itemSize","normalized","result","BufferGeometry","setAttribute","setIndex","BinaryHeap","scoreFunction","content","element","sinkDown","pop","end","bubbleUp","remove","node","indexOf","size","rescoreElement","n","parentN","parent","elemScore","child2N","child1N","swap","child1Score","AStar","init","graph","f","g","h","cost","visited","closed","cleanUp","heap","search","start","openHeap","currentNode","curr","ret","reverse","neighbours","il","neighbour","gScore","beenVisited","centroid","Error","heuristic","pos1","pos2","e","Builder","buildZone","navMesh","_buildNavigationMesh","zone","v","groups","_buildPolygonGroups","Array","group","groupIndex","indexByPolygon","Map","polyIndex","set","newGroup","neighbourIndices","get","portals","_this","_getSharedVerticesInOrder","Vector3","add","divideScalar","id","_buildPolygonsFromGeometry","_spreadGroupId","seed","nextBatch","Set","batch","undefined","navigationMesh","polygonGroups","polygons","_this2","_buildPolygonNeighbours","vertexPolygonMap","groupB","groupC","candidate","includes","position","attributes","fromBufferAttribute","_this3","aList","a0","a1","a2","bList","shared0","shared1","shared2","from","console","warn","Channel","p1","p2","left","right","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","path","Pathfinding","zones","createZone","setZoneData","zoneID","getRandomNode","groupID","nearPosition","nearRange","candidates","p","getClosestNode","checkPolygon","closestNode","closestDistance","Infinity","distance","findPath","startPosition","targetPosition","nodes","farthestNode","paths","getPortalFromTo","channel","nextPolygon","map","shift","prototype","getGroup","Plane","closestNodeGroup","setFromCoplanarPoints","abs","distanceToPoint","measuredDistance","clampStep","point","triangle","Triangle","endPoint","closestPoint","startRef","endRef","endTarget","nodeQueue","nodeDepth","projectPoint","copy","closestPointToPoint","depth","colors","PLAYER","Color","convertGammaToLinear","getHex","TARGET","PATH","WAYPOINT","CLAMPED_STEP","CLOSEST_NODE","PathfindingHelper","_playerMarker","Mesh","SphereBufferGeometry","MeshBasicMaterial","color","_targetMarker","BoxBufferGeometry","_nodeMarker","_stepMarker","_pathMarker","Object3D","_pathLineMaterial","LineBasicMaterial","linewidth","_pathPointMaterial","_pathPointGeometry","_markers","marker","visible","setPath","children","concat","setXYZ","Line","setPlayerPosition","setTargetPosition","setNodePosition","setStepPosition","reset"],"mappings":"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"}